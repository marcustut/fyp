// Code generated by entc, DO NOT EDIT.

package instance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/marcustut/fyp/backend/ent/predicate"
	"github.com/marcustut/fyp/backend/ent/schema/ulid"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// InstanceID applies equality check predicate on the "instance_id" field. It's identical to InstanceIDEQ.
func InstanceID(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), v))
	})
}

// InstanceType applies equality check predicate on the "instance_type" field. It's identical to InstanceTypeEQ.
func InstanceType(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceType), v))
	})
}

// PrivateDNSName applies equality check predicate on the "private_dns_name" field. It's identical to PrivateDNSNameEQ.
func PrivateDNSName(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateIPAddress applies equality check predicate on the "private_ip_address" field. It's identical to PrivateIPAddressEQ.
func PrivateIPAddress(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateIPAddress), v))
	})
}

// PublicDNSName applies equality check predicate on the "public_dns_name" field. It's identical to PublicDNSNameEQ.
func PublicDNSName(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicDNSName), v))
	})
}

// PublicIPAddress applies equality check predicate on the "public_ip_address" field. It's identical to PublicIPAddressEQ.
func PublicIPAddress(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIPAddress), v))
	})
}

// ImageID applies equality check predicate on the "image_id" field. It's identical to ImageIDEQ.
func ImageID(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageID), v))
	})
}

// Architecture applies equality check predicate on the "architecture" field. It's identical to ArchitectureEQ.
func Architecture(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchitecture), v))
	})
}

// AvailabilityZone applies equality check predicate on the "availability_zone" field. It's identical to AvailabilityZoneEQ.
func AvailabilityZone(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailabilityZone), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// InstanceIDEQ applies the EQ predicate on the "instance_id" field.
func InstanceIDEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), v))
	})
}

// InstanceIDNEQ applies the NEQ predicate on the "instance_id" field.
func InstanceIDNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceID), v))
	})
}

// InstanceIDIn applies the In predicate on the "instance_id" field.
func InstanceIDIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDNotIn applies the NotIn predicate on the "instance_id" field.
func InstanceIDNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDGT applies the GT predicate on the "instance_id" field.
func InstanceIDGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceID), v))
	})
}

// InstanceIDGTE applies the GTE predicate on the "instance_id" field.
func InstanceIDGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceID), v))
	})
}

// InstanceIDLT applies the LT predicate on the "instance_id" field.
func InstanceIDLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceID), v))
	})
}

// InstanceIDLTE applies the LTE predicate on the "instance_id" field.
func InstanceIDLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceID), v))
	})
}

// InstanceIDContains applies the Contains predicate on the "instance_id" field.
func InstanceIDContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceID), v))
	})
}

// InstanceIDHasPrefix applies the HasPrefix predicate on the "instance_id" field.
func InstanceIDHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceID), v))
	})
}

// InstanceIDHasSuffix applies the HasSuffix predicate on the "instance_id" field.
func InstanceIDHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceID), v))
	})
}

// InstanceIDEqualFold applies the EqualFold predicate on the "instance_id" field.
func InstanceIDEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceID), v))
	})
}

// InstanceIDContainsFold applies the ContainsFold predicate on the "instance_id" field.
func InstanceIDContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceID), v))
	})
}

// InstanceTypeEQ applies the EQ predicate on the "instance_type" field.
func InstanceTypeEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeNEQ applies the NEQ predicate on the "instance_type" field.
func InstanceTypeNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeIn applies the In predicate on the "instance_type" field.
func InstanceTypeIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstanceType), v...))
	})
}

// InstanceTypeNotIn applies the NotIn predicate on the "instance_type" field.
func InstanceTypeNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstanceType), v...))
	})
}

// InstanceTypeGT applies the GT predicate on the "instance_type" field.
func InstanceTypeGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeGTE applies the GTE predicate on the "instance_type" field.
func InstanceTypeGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeLT applies the LT predicate on the "instance_type" field.
func InstanceTypeLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeLTE applies the LTE predicate on the "instance_type" field.
func InstanceTypeLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeContains applies the Contains predicate on the "instance_type" field.
func InstanceTypeContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeHasPrefix applies the HasPrefix predicate on the "instance_type" field.
func InstanceTypeHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeHasSuffix applies the HasSuffix predicate on the "instance_type" field.
func InstanceTypeHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeEqualFold applies the EqualFold predicate on the "instance_type" field.
func InstanceTypeEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeContainsFold applies the ContainsFold predicate on the "instance_type" field.
func InstanceTypeContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceType), v))
	})
}

// PrivateDNSNameEQ applies the EQ predicate on the "private_dns_name" field.
func PrivateDNSNameEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameNEQ applies the NEQ predicate on the "private_dns_name" field.
func PrivateDNSNameNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameIn applies the In predicate on the "private_dns_name" field.
func PrivateDNSNameIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivateDNSName), v...))
	})
}

// PrivateDNSNameNotIn applies the NotIn predicate on the "private_dns_name" field.
func PrivateDNSNameNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivateDNSName), v...))
	})
}

// PrivateDNSNameGT applies the GT predicate on the "private_dns_name" field.
func PrivateDNSNameGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameGTE applies the GTE predicate on the "private_dns_name" field.
func PrivateDNSNameGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameLT applies the LT predicate on the "private_dns_name" field.
func PrivateDNSNameLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameLTE applies the LTE predicate on the "private_dns_name" field.
func PrivateDNSNameLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameContains applies the Contains predicate on the "private_dns_name" field.
func PrivateDNSNameContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameHasPrefix applies the HasPrefix predicate on the "private_dns_name" field.
func PrivateDNSNameHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameHasSuffix applies the HasSuffix predicate on the "private_dns_name" field.
func PrivateDNSNameHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameEqualFold applies the EqualFold predicate on the "private_dns_name" field.
func PrivateDNSNameEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateDNSNameContainsFold applies the ContainsFold predicate on the "private_dns_name" field.
func PrivateDNSNameContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateDNSName), v))
	})
}

// PrivateIPAddressEQ applies the EQ predicate on the "private_ip_address" field.
func PrivateIPAddressEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressNEQ applies the NEQ predicate on the "private_ip_address" field.
func PrivateIPAddressNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressIn applies the In predicate on the "private_ip_address" field.
func PrivateIPAddressIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivateIPAddress), v...))
	})
}

// PrivateIPAddressNotIn applies the NotIn predicate on the "private_ip_address" field.
func PrivateIPAddressNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivateIPAddress), v...))
	})
}

// PrivateIPAddressGT applies the GT predicate on the "private_ip_address" field.
func PrivateIPAddressGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressGTE applies the GTE predicate on the "private_ip_address" field.
func PrivateIPAddressGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressLT applies the LT predicate on the "private_ip_address" field.
func PrivateIPAddressLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressLTE applies the LTE predicate on the "private_ip_address" field.
func PrivateIPAddressLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressContains applies the Contains predicate on the "private_ip_address" field.
func PrivateIPAddressContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressHasPrefix applies the HasPrefix predicate on the "private_ip_address" field.
func PrivateIPAddressHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressHasSuffix applies the HasSuffix predicate on the "private_ip_address" field.
func PrivateIPAddressHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressEqualFold applies the EqualFold predicate on the "private_ip_address" field.
func PrivateIPAddressEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateIPAddress), v))
	})
}

// PrivateIPAddressContainsFold applies the ContainsFold predicate on the "private_ip_address" field.
func PrivateIPAddressContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateIPAddress), v))
	})
}

// PublicDNSNameEQ applies the EQ predicate on the "public_dns_name" field.
func PublicDNSNameEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameNEQ applies the NEQ predicate on the "public_dns_name" field.
func PublicDNSNameNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameIn applies the In predicate on the "public_dns_name" field.
func PublicDNSNameIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublicDNSName), v...))
	})
}

// PublicDNSNameNotIn applies the NotIn predicate on the "public_dns_name" field.
func PublicDNSNameNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublicDNSName), v...))
	})
}

// PublicDNSNameGT applies the GT predicate on the "public_dns_name" field.
func PublicDNSNameGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameGTE applies the GTE predicate on the "public_dns_name" field.
func PublicDNSNameGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameLT applies the LT predicate on the "public_dns_name" field.
func PublicDNSNameLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameLTE applies the LTE predicate on the "public_dns_name" field.
func PublicDNSNameLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameContains applies the Contains predicate on the "public_dns_name" field.
func PublicDNSNameContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameHasPrefix applies the HasPrefix predicate on the "public_dns_name" field.
func PublicDNSNameHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameHasSuffix applies the HasSuffix predicate on the "public_dns_name" field.
func PublicDNSNameHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameEqualFold applies the EqualFold predicate on the "public_dns_name" field.
func PublicDNSNameEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicDNSName), v))
	})
}

// PublicDNSNameContainsFold applies the ContainsFold predicate on the "public_dns_name" field.
func PublicDNSNameContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicDNSName), v))
	})
}

// PublicIPAddressEQ applies the EQ predicate on the "public_ip_address" field.
func PublicIPAddressEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressNEQ applies the NEQ predicate on the "public_ip_address" field.
func PublicIPAddressNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressIn applies the In predicate on the "public_ip_address" field.
func PublicIPAddressIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublicIPAddress), v...))
	})
}

// PublicIPAddressNotIn applies the NotIn predicate on the "public_ip_address" field.
func PublicIPAddressNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublicIPAddress), v...))
	})
}

// PublicIPAddressGT applies the GT predicate on the "public_ip_address" field.
func PublicIPAddressGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressGTE applies the GTE predicate on the "public_ip_address" field.
func PublicIPAddressGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressLT applies the LT predicate on the "public_ip_address" field.
func PublicIPAddressLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressLTE applies the LTE predicate on the "public_ip_address" field.
func PublicIPAddressLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressContains applies the Contains predicate on the "public_ip_address" field.
func PublicIPAddressContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressHasPrefix applies the HasPrefix predicate on the "public_ip_address" field.
func PublicIPAddressHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressHasSuffix applies the HasSuffix predicate on the "public_ip_address" field.
func PublicIPAddressHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressEqualFold applies the EqualFold predicate on the "public_ip_address" field.
func PublicIPAddressEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicIPAddress), v))
	})
}

// PublicIPAddressContainsFold applies the ContainsFold predicate on the "public_ip_address" field.
func PublicIPAddressContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicIPAddress), v))
	})
}

// ImageIDEQ applies the EQ predicate on the "image_id" field.
func ImageIDEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageID), v))
	})
}

// ImageIDNEQ applies the NEQ predicate on the "image_id" field.
func ImageIDNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageID), v))
	})
}

// ImageIDIn applies the In predicate on the "image_id" field.
func ImageIDIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageID), v...))
	})
}

// ImageIDNotIn applies the NotIn predicate on the "image_id" field.
func ImageIDNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageID), v...))
	})
}

// ImageIDGT applies the GT predicate on the "image_id" field.
func ImageIDGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageID), v))
	})
}

// ImageIDGTE applies the GTE predicate on the "image_id" field.
func ImageIDGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageID), v))
	})
}

// ImageIDLT applies the LT predicate on the "image_id" field.
func ImageIDLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageID), v))
	})
}

// ImageIDLTE applies the LTE predicate on the "image_id" field.
func ImageIDLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageID), v))
	})
}

// ImageIDContains applies the Contains predicate on the "image_id" field.
func ImageIDContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageID), v))
	})
}

// ImageIDHasPrefix applies the HasPrefix predicate on the "image_id" field.
func ImageIDHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageID), v))
	})
}

// ImageIDHasSuffix applies the HasSuffix predicate on the "image_id" field.
func ImageIDHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageID), v))
	})
}

// ImageIDEqualFold applies the EqualFold predicate on the "image_id" field.
func ImageIDEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageID), v))
	})
}

// ImageIDContainsFold applies the ContainsFold predicate on the "image_id" field.
func ImageIDContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageID), v))
	})
}

// ArchitectureEQ applies the EQ predicate on the "architecture" field.
func ArchitectureEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchitecture), v))
	})
}

// ArchitectureNEQ applies the NEQ predicate on the "architecture" field.
func ArchitectureNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArchitecture), v))
	})
}

// ArchitectureIn applies the In predicate on the "architecture" field.
func ArchitectureIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArchitecture), v...))
	})
}

// ArchitectureNotIn applies the NotIn predicate on the "architecture" field.
func ArchitectureNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArchitecture), v...))
	})
}

// ArchitectureGT applies the GT predicate on the "architecture" field.
func ArchitectureGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArchitecture), v))
	})
}

// ArchitectureGTE applies the GTE predicate on the "architecture" field.
func ArchitectureGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArchitecture), v))
	})
}

// ArchitectureLT applies the LT predicate on the "architecture" field.
func ArchitectureLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArchitecture), v))
	})
}

// ArchitectureLTE applies the LTE predicate on the "architecture" field.
func ArchitectureLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArchitecture), v))
	})
}

// ArchitectureContains applies the Contains predicate on the "architecture" field.
func ArchitectureContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArchitecture), v))
	})
}

// ArchitectureHasPrefix applies the HasPrefix predicate on the "architecture" field.
func ArchitectureHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArchitecture), v))
	})
}

// ArchitectureHasSuffix applies the HasSuffix predicate on the "architecture" field.
func ArchitectureHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArchitecture), v))
	})
}

// ArchitectureEqualFold applies the EqualFold predicate on the "architecture" field.
func ArchitectureEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArchitecture), v))
	})
}

// ArchitectureContainsFold applies the ContainsFold predicate on the "architecture" field.
func ArchitectureContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArchitecture), v))
	})
}

// AvailabilityZoneEQ applies the EQ predicate on the "availability_zone" field.
func AvailabilityZoneEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneNEQ applies the NEQ predicate on the "availability_zone" field.
func AvailabilityZoneNEQ(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneIn applies the In predicate on the "availability_zone" field.
func AvailabilityZoneIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvailabilityZone), v...))
	})
}

// AvailabilityZoneNotIn applies the NotIn predicate on the "availability_zone" field.
func AvailabilityZoneNotIn(vs ...string) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvailabilityZone), v...))
	})
}

// AvailabilityZoneGT applies the GT predicate on the "availability_zone" field.
func AvailabilityZoneGT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneGTE applies the GTE predicate on the "availability_zone" field.
func AvailabilityZoneGTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneLT applies the LT predicate on the "availability_zone" field.
func AvailabilityZoneLT(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneLTE applies the LTE predicate on the "availability_zone" field.
func AvailabilityZoneLTE(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneContains applies the Contains predicate on the "availability_zone" field.
func AvailabilityZoneContains(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneHasPrefix applies the HasPrefix predicate on the "availability_zone" field.
func AvailabilityZoneHasPrefix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneHasSuffix applies the HasSuffix predicate on the "availability_zone" field.
func AvailabilityZoneHasSuffix(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneEqualFold applies the EqualFold predicate on the "availability_zone" field.
func AvailabilityZoneEqualFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvailabilityZone), v))
	})
}

// AvailabilityZoneContainsFold applies the ContainsFold predicate on the "availability_zone" field.
func AvailabilityZoneContainsFold(v string) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvailabilityZone), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Instance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Instance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSlide applies the HasEdge predicate on the "slide" edge.
func HasSlide() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SlideTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SlideTable, SlideColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSlideWith applies the HasEdge predicate on the "slide" edge with a given conditions (other predicates).
func HasSlideWith(preds ...predicate.Slide) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SlideInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SlideTable, SlideColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Instance) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Instance) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Instance) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		p(s.Not())
	})
}
