// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marcustut/fyp/backend/ent/instance"
	"github.com/marcustut/fyp/backend/ent/schema/ulid"
	"github.com/marcustut/fyp/backend/ent/slide"
	"github.com/marcustut/fyp/backend/ent/user"
)

// InstanceCreate is the builder for creating a Instance entity.
type InstanceCreate struct {
	config
	mutation *InstanceMutation
	hooks    []Hook
}

// SetInstanceID sets the "instance_id" field.
func (ic *InstanceCreate) SetInstanceID(s string) *InstanceCreate {
	ic.mutation.SetInstanceID(s)
	return ic
}

// SetInstanceType sets the "instance_type" field.
func (ic *InstanceCreate) SetInstanceType(s string) *InstanceCreate {
	ic.mutation.SetInstanceType(s)
	return ic
}

// SetPrivateDNSName sets the "private_dns_name" field.
func (ic *InstanceCreate) SetPrivateDNSName(s string) *InstanceCreate {
	ic.mutation.SetPrivateDNSName(s)
	return ic
}

// SetPrivateIPAddress sets the "private_ip_address" field.
func (ic *InstanceCreate) SetPrivateIPAddress(s string) *InstanceCreate {
	ic.mutation.SetPrivateIPAddress(s)
	return ic
}

// SetPublicDNSName sets the "public_dns_name" field.
func (ic *InstanceCreate) SetPublicDNSName(s string) *InstanceCreate {
	ic.mutation.SetPublicDNSName(s)
	return ic
}

// SetPublicIPAddress sets the "public_ip_address" field.
func (ic *InstanceCreate) SetPublicIPAddress(s string) *InstanceCreate {
	ic.mutation.SetPublicIPAddress(s)
	return ic
}

// SetImageID sets the "image_id" field.
func (ic *InstanceCreate) SetImageID(s string) *InstanceCreate {
	ic.mutation.SetImageID(s)
	return ic
}

// SetArchitecture sets the "architecture" field.
func (ic *InstanceCreate) SetArchitecture(s string) *InstanceCreate {
	ic.mutation.SetArchitecture(s)
	return ic
}

// SetAvailabilityZone sets the "availability_zone" field.
func (ic *InstanceCreate) SetAvailabilityZone(s string) *InstanceCreate {
	ic.mutation.SetAvailabilityZone(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InstanceCreate) SetCreatedAt(t time.Time) *InstanceCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InstanceCreate) SetNillableCreatedAt(t *time.Time) *InstanceCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InstanceCreate) SetUpdatedAt(t time.Time) *InstanceCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InstanceCreate) SetNillableUpdatedAt(t *time.Time) *InstanceCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InstanceCreate) SetID(u ulid.ID) *InstanceCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InstanceCreate) SetNillableID(u *ulid.ID) *InstanceCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ic *InstanceCreate) SetUserID(id ulid.ID) *InstanceCreate {
	ic.mutation.SetUserID(id)
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *InstanceCreate) SetUser(u *User) *InstanceCreate {
	return ic.SetUserID(u.ID)
}

// SetSlideID sets the "slide" edge to the Slide entity by ID.
func (ic *InstanceCreate) SetSlideID(id ulid.ID) *InstanceCreate {
	ic.mutation.SetSlideID(id)
	return ic
}

// SetSlide sets the "slide" edge to the Slide entity.
func (ic *InstanceCreate) SetSlide(s *Slide) *InstanceCreate {
	return ic.SetSlideID(s.ID)
}

// Mutation returns the InstanceMutation object of the builder.
func (ic *InstanceCreate) Mutation() *InstanceMutation {
	return ic.mutation
}

// Save creates the Instance in the database.
func (ic *InstanceCreate) Save(ctx context.Context) (*Instance, error) {
	var (
		err  error
		node *Instance
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstanceCreate) SaveX(ctx context.Context) *Instance {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstanceCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstanceCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InstanceCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := instance.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := instance.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := instance.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstanceCreate) check() error {
	if _, ok := ic.mutation.InstanceID(); !ok {
		return &ValidationError{Name: "instance_id", err: errors.New(`ent: missing required field "instance_id"`)}
	}
	if _, ok := ic.mutation.InstanceType(); !ok {
		return &ValidationError{Name: "instance_type", err: errors.New(`ent: missing required field "instance_type"`)}
	}
	if _, ok := ic.mutation.PrivateDNSName(); !ok {
		return &ValidationError{Name: "private_dns_name", err: errors.New(`ent: missing required field "private_dns_name"`)}
	}
	if _, ok := ic.mutation.PrivateIPAddress(); !ok {
		return &ValidationError{Name: "private_ip_address", err: errors.New(`ent: missing required field "private_ip_address"`)}
	}
	if _, ok := ic.mutation.PublicDNSName(); !ok {
		return &ValidationError{Name: "public_dns_name", err: errors.New(`ent: missing required field "public_dns_name"`)}
	}
	if _, ok := ic.mutation.PublicIPAddress(); !ok {
		return &ValidationError{Name: "public_ip_address", err: errors.New(`ent: missing required field "public_ip_address"`)}
	}
	if _, ok := ic.mutation.ImageID(); !ok {
		return &ValidationError{Name: "image_id", err: errors.New(`ent: missing required field "image_id"`)}
	}
	if _, ok := ic.mutation.Architecture(); !ok {
		return &ValidationError{Name: "architecture", err: errors.New(`ent: missing required field "architecture"`)}
	}
	if v, ok := ic.mutation.Architecture(); ok {
		if err := instance.ArchitectureValidator(v); err != nil {
			return &ValidationError{Name: "architecture", err: fmt.Errorf(`ent: validator failed for field "architecture": %w`, err)}
		}
	}
	if _, ok := ic.mutation.AvailabilityZone(); !ok {
		return &ValidationError{Name: "availability_zone", err: errors.New(`ent: missing required field "availability_zone"`)}
	}
	if v, ok := ic.mutation.AvailabilityZone(); ok {
		if err := instance.AvailabilityZoneValidator(v); err != nil {
			return &ValidationError{Name: "availability_zone", err: fmt.Errorf(`ent: validator failed for field "availability_zone": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := ic.mutation.SlideID(); !ok {
		return &ValidationError{Name: "slide", err: errors.New("ent: missing required edge \"slide\"")}
	}
	return nil
}

func (ic *InstanceCreate) sqlSave(ctx context.Context) (*Instance, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (ic *InstanceCreate) createSpec() (*Instance, *sqlgraph.CreateSpec) {
	var (
		_node = &Instance{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: instance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: instance.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.InstanceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldInstanceID,
		})
		_node.InstanceID = value
	}
	if value, ok := ic.mutation.InstanceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldInstanceType,
		})
		_node.InstanceType = value
	}
	if value, ok := ic.mutation.PrivateDNSName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPrivateDNSName,
		})
		_node.PrivateDNSName = value
	}
	if value, ok := ic.mutation.PrivateIPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPrivateIPAddress,
		})
		_node.PrivateIPAddress = value
	}
	if value, ok := ic.mutation.PublicDNSName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPublicDNSName,
		})
		_node.PublicDNSName = value
	}
	if value, ok := ic.mutation.PublicIPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPublicIPAddress,
		})
		_node.PublicIPAddress = value
	}
	if value, ok := ic.mutation.ImageID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldImageID,
		})
		_node.ImageID = value
	}
	if value, ok := ic.mutation.Architecture(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldArchitecture,
		})
		_node.Architecture = value
	}
	if value, ok := ic.mutation.AvailabilityZone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldAvailabilityZone,
		})
		_node.AvailabilityZone = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: instance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instance.UserTable,
			Columns: []string{instance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.SlideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   instance.SlideTable,
			Columns: []string{instance.SlideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: slide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.slide_instance = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstanceCreateBulk is the builder for creating many Instance entities in bulk.
type InstanceCreateBulk struct {
	config
	builders []*InstanceCreate
}

// Save creates the Instance entities in the database.
func (icb *InstanceCreateBulk) Save(ctx context.Context) ([]*Instance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Instance, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstanceCreateBulk) SaveX(ctx context.Context) []*Instance {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstanceCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
