// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/mailru/easyjson"
	"github.com/marcustut/fyp/backend/ent"
	"github.com/marcustut/fyp/backend/ent/slide"
	"github.com/marcustut/fyp/backend/ent/user"
	"go.uber.org/zap"
)

// Update updates a given ent.Slide and saves the changes to the database.
func (h SlideHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	var err error
	id := chi.URLParam(r, "id")
	// Get the post data.
	var d SlideUpdateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Slide.UpdateOneID(string(id))
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", string(id)))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", string(id)))
			BadRequest(w, msg)
		default:
			l.Error("could-not-update-slide", zap.Error(err), zap.String("id", string(id)))
			InternalServerError(w, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Slide.Query().Where(slide.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.String("id", string(id)))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.String("id", string(id)))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-slide", zap.Error(err), zap.String("id", string(id)))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("slide rendered", zap.String("id", string(id)))
	easyjson.MarshalToHTTPResponseWriter(NewSlide3844259445View(e), w)
}

// Update updates a given ent.User and saves the changes to the database.
func (h UserHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Get the post data.
	var d UserUpdateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Validate the data.
	errs := make(map[string]string)
	if d.Username == nil {
		errs["username"] = `missing required field: "username"`
	} else if err := user.UsernameValidator(*d.Username); err != nil {
		errs["username"] = strings.TrimPrefix(err.Error(), "user: ")
	}
	if d.FullName != nil {
		if err := user.FullNameValidator(*d.FullName); err != nil {
			errs["full_name"] = strings.TrimPrefix(err.Error(), "user: ")
		}
	}
	if d.AvatarURL != nil {
		if err := user.AvatarURLValidator(*d.AvatarURL); err != nil {
			errs["avatar_url"] = strings.TrimPrefix(err.Error(), "user: ")
		}
	}
	if d.Bio != nil {
		if err := user.BioValidator(*d.Bio); err != nil {
			errs["bio"] = strings.TrimPrefix(err.Error(), "user: ")
		}
	}
	if len(errs) > 0 {
		l.Info("validation failed", zapFields(errs)...)
		BadRequest(w, errs)
		return
	}
	// Save the data.
	b := h.client.User.UpdateOneID(id)
	if d.Username != nil {
		b.SetUsername(*d.Username)
	}
	if d.FullName != nil {
		b.SetFullName(*d.FullName)
	}
	if d.AvatarURL != nil {
		b.SetAvatarURL(*d.AvatarURL)
	}
	if d.Bio != nil {
		b.SetBio(*d.Bio)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could-not-update-user", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.User.Query().Where(user.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-user", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("user rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewUser843294600View(e), w)
}
