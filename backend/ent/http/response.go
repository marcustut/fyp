// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"
	"time"

	"github.com/mailru/easyjson"
	"github.com/marcustut/fyp/backend/ent"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// Slide3844259445View represents the data serialized for the following serialization group combinations:
	// []
	Slide3844259445View struct {
		ID        string    `json:"id,omitempty"`
		Name      string    `json:"name,omitempty"`
		CreatedAt time.Time `json:"created_at,omitempty"`
		UpdatedAt time.Time `json:"updated_at,omitempty"`
	}
	Slide3844259445Views []*Slide3844259445View
)

func NewSlide3844259445View(e *ent.Slide) *Slide3844259445View {
	if e == nil {
		return nil
	}
	return &Slide3844259445View{
		ID:        e.ID,
		Name:      e.Name,
		CreatedAt: e.CreatedAt,
		UpdatedAt: e.UpdatedAt,
	}
}

func NewSlide3844259445Views(es []*ent.Slide) Slide3844259445Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Slide3844259445Views, len(es))
	for i, e := range es {
		r[i] = NewSlide3844259445View(e)
	}
	return r
}

type (
	// User843294600View represents the data serialized for the following serialization group combinations:
	// []
	User843294600View struct {
		ID        int       `json:"id,omitempty"`
		Username  string    `json:"username,omitempty"`
		Email     string    `json:"email,omitempty"`
		FullName  string    `json:"full_name,omitempty"`
		AvatarURL string    `json:"avatar_url,omitempty"`
		Bio       string    `json:"bio,omitempty"`
		CreatedAt time.Time `json:"created_at,omitempty"`
		UpdatedAt time.Time `json:"updated_at,omitempty"`
	}
	User843294600Views []*User843294600View
)

func NewUser843294600View(e *ent.User) *User843294600View {
	if e == nil {
		return nil
	}
	return &User843294600View{
		ID:        e.ID,
		Username:  e.Username,
		Email:     e.Email,
		FullName:  e.FullName,
		AvatarURL: e.AvatarURL,
		Bio:       e.Bio,
		CreatedAt: e.CreatedAt,
		UpdatedAt: e.UpdatedAt,
	}
}

func NewUser843294600Views(es []*ent.User) User843294600Views {
	if len(es) == 0 {
		return nil
	}
	r := make(User843294600Views, len(es))
	for i, e := range es {
		r[i] = NewUser843294600View(e)
	}
	return r
}
