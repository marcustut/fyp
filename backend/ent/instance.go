// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/marcustut/fyp/backend/ent/instance"
	"github.com/marcustut/fyp/backend/ent/schema/ulid"
	"github.com/marcustut/fyp/backend/ent/slide"
	"github.com/marcustut/fyp/backend/ent/user"
)

// Instance is the model entity for the Instance schema.
type Instance struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// InstanceID holds the value of the "instance_id" field.
	InstanceID string `json:"instance_id,omitempty"`
	// InstanceType holds the value of the "instance_type" field.
	InstanceType string `json:"instance_type,omitempty"`
	// PrivateDNSName holds the value of the "private_dns_name" field.
	PrivateDNSName string `json:"private_dns_name,omitempty"`
	// PrivateIPAddress holds the value of the "private_ip_address" field.
	PrivateIPAddress string `json:"private_ip_address,omitempty"`
	// PublicDNSName holds the value of the "public_dns_name" field.
	PublicDNSName string `json:"public_dns_name,omitempty"`
	// PublicIPAddress holds the value of the "public_ip_address" field.
	PublicIPAddress string `json:"public_ip_address,omitempty"`
	// ImageID holds the value of the "image_id" field.
	ImageID string `json:"image_id,omitempty"`
	// Architecture holds the value of the "architecture" field.
	Architecture string `json:"architecture,omitempty"`
	// AvailabilityZone holds the value of the "availability_zone" field.
	AvailabilityZone string `json:"availability_zone,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstanceQuery when eager-loading is set.
	Edges          InstanceEdges `json:"edges"`
	slide_instance *ulid.ID
	user_instances *ulid.ID
}

// InstanceEdges holds the relations/edges for other nodes in the graph.
type InstanceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Slide holds the value of the slide edge.
	Slide *Slide `json:"slide,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SlideOrErr returns the Slide value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceEdges) SlideOrErr() (*Slide, error) {
	if e.loadedTypes[1] {
		if e.Slide == nil {
			// The edge slide was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: slide.Label}
		}
		return e.Slide, nil
	}
	return nil, &NotLoadedError{edge: "slide"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case instance.FieldInstanceID, instance.FieldInstanceType, instance.FieldPrivateDNSName, instance.FieldPrivateIPAddress, instance.FieldPublicDNSName, instance.FieldPublicIPAddress, instance.FieldImageID, instance.FieldArchitecture, instance.FieldAvailabilityZone:
			values[i] = new(sql.NullString)
		case instance.FieldCreatedAt, instance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case instance.FieldID:
			values[i] = new(ulid.ID)
		case instance.ForeignKeys[0]: // slide_instance
			values[i] = &sql.NullScanner{S: new(ulid.ID)}
		case instance.ForeignKeys[1]: // user_instances
			values[i] = &sql.NullScanner{S: new(ulid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Instance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instance fields.
func (i *Instance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instance.FieldID:
			if value, ok := values[j].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case instance.FieldInstanceID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_id", values[j])
			} else if value.Valid {
				i.InstanceID = value.String
			}
		case instance.FieldInstanceType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_type", values[j])
			} else if value.Valid {
				i.InstanceType = value.String
			}
		case instance.FieldPrivateDNSName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_dns_name", values[j])
			} else if value.Valid {
				i.PrivateDNSName = value.String
			}
		case instance.FieldPrivateIPAddress:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_ip_address", values[j])
			} else if value.Valid {
				i.PrivateIPAddress = value.String
			}
		case instance.FieldPublicDNSName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_dns_name", values[j])
			} else if value.Valid {
				i.PublicDNSName = value.String
			}
		case instance.FieldPublicIPAddress:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_ip_address", values[j])
			} else if value.Valid {
				i.PublicIPAddress = value.String
			}
		case instance.FieldImageID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_id", values[j])
			} else if value.Valid {
				i.ImageID = value.String
			}
		case instance.FieldArchitecture:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field architecture", values[j])
			} else if value.Valid {
				i.Architecture = value.String
			}
		case instance.FieldAvailabilityZone:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field availability_zone", values[j])
			} else if value.Valid {
				i.AvailabilityZone = value.String
			}
		case instance.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case instance.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case instance.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field slide_instance", values[j])
			} else if value.Valid {
				i.slide_instance = new(ulid.ID)
				*i.slide_instance = *value.S.(*ulid.ID)
			}
		case instance.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_instances", values[j])
			} else if value.Valid {
				i.user_instances = new(ulid.ID)
				*i.user_instances = *value.S.(*ulid.ID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Instance entity.
func (i *Instance) QueryUser() *UserQuery {
	return (&InstanceClient{config: i.config}).QueryUser(i)
}

// QuerySlide queries the "slide" edge of the Instance entity.
func (i *Instance) QuerySlide() *SlideQuery {
	return (&InstanceClient{config: i.config}).QuerySlide(i)
}

// Update returns a builder for updating this Instance.
// Note that you need to call Instance.Unwrap() before calling this method if this Instance
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instance) Update() *InstanceUpdateOne {
	return (&InstanceClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Instance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instance) Unwrap() *Instance {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Instance is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instance) String() string {
	var builder strings.Builder
	builder.WriteString("Instance(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", instance_id=")
	builder.WriteString(i.InstanceID)
	builder.WriteString(", instance_type=")
	builder.WriteString(i.InstanceType)
	builder.WriteString(", private_dns_name=")
	builder.WriteString(i.PrivateDNSName)
	builder.WriteString(", private_ip_address=")
	builder.WriteString(i.PrivateIPAddress)
	builder.WriteString(", public_dns_name=")
	builder.WriteString(i.PublicDNSName)
	builder.WriteString(", public_ip_address=")
	builder.WriteString(i.PublicIPAddress)
	builder.WriteString(", image_id=")
	builder.WriteString(i.ImageID)
	builder.WriteString(", architecture=")
	builder.WriteString(i.Architecture)
	builder.WriteString(", availability_zone=")
	builder.WriteString(i.AvailabilityZone)
	builder.WriteString(", created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Instances is a parsable slice of Instance.
type Instances []*Instance

func (i Instances) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
