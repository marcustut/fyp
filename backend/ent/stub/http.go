// Package stub provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/marcustut/fyp/backend version (devel) DO NOT EDIT.
package stub

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Slide3844259445View defines model for Slide3844259445View.
type Slide3844259445View struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// User843294600View defines model for User843294600View.
type User843294600View struct {
	AvatarUrl *string   `json:"avatar_url,omitempty"`
	Bio       *string   `json:"bio,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	FullName  *string   `json:"full_name,omitempty"`
	Id        int32     `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// N400 defines model for 400.
type N400 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// N404 defines model for 404.
type N404 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// N500 defines model for 500.
type N500 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// ListSlideParams defines parameters for ListSlide.
type ListSlideParams struct {
	// what page to render
	Page *int32 `json:"page,omitempty"`

	// item count to render per page
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`
}

// CreateSlideJSONBody defines parameters for CreateSlide.
type CreateSlideJSONBody struct {
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// UpdateSlideJSONBody defines parameters for UpdateSlide.
type UpdateSlideJSONBody struct {
	Name string `json:"name"`
}

// ListUserParams defines parameters for ListUser.
type ListUserParams struct {
	// what page to render
	Page *int32 `json:"page,omitempty"`

	// item count to render per page
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	AvatarUrl *string   `json:"avatar_url,omitempty"`
	Bio       *string   `json:"bio,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	FullName  *string   `json:"full_name,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Bio       *string `json:"bio,omitempty"`
	FullName  *string `json:"full_name,omitempty"`
	Username  string  `json:"username"`
}

// CreateSlideJSONRequestBody defines body for CreateSlide for application/json ContentType.
type CreateSlideJSONRequestBody = CreateSlideJSONBody

// UpdateSlideJSONRequestBody defines body for UpdateSlide for application/json ContentType.
type UpdateSlideJSONRequestBody = UpdateSlideJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListSlide request
	ListSlide(ctx context.Context, params *ListSlideParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSlide request with any body
	CreateSlideWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSlide(ctx context.Context, body CreateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSlide request
	DeleteSlide(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSlide request
	ReadSlide(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSlide request with any body
	UpdateSlideWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSlide(ctx context.Context, id string, body UpdateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUser request
	ListUser(ctx context.Context, params *ListUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadUser request
	ReadUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUser request with any body
	UpdateUserWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, id int32, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListSlide(ctx context.Context, params *ListSlideParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSlideRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSlideWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSlideRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSlide(ctx context.Context, body CreateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSlideRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSlide(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSlideRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSlide(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSlideRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSlideWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSlideRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSlide(ctx context.Context, id string, body UpdateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSlideRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUser(ctx context.Context, params *ListUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadUser(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, id int32, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListSlideRequest generates requests for ListSlide
func NewListSlideRequest(server string, params *ListSlideParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slides")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ItemsPerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSlideRequest calls the generic CreateSlide builder with application/json body
func NewCreateSlideRequest(server string, body CreateSlideJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSlideRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSlideRequestWithBody generates requests for CreateSlide with any type of body
func NewCreateSlideRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slides")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSlideRequest generates requests for DeleteSlide
func NewDeleteSlideRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slides/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSlideRequest generates requests for ReadSlide
func NewReadSlideRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slides/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSlideRequest calls the generic UpdateSlide builder with application/json body
func NewUpdateSlideRequest(server string, id string, body UpdateSlideJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSlideRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSlideRequestWithBody generates requests for UpdateSlide with any type of body
func NewUpdateSlideRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slides/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserRequest generates requests for ListUser
func NewListUserRequest(server string, params *ListUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ItemsPerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadUserRequest generates requests for ReadUser
func NewReadUserRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, id int32, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListSlide request
	ListSlideWithResponse(ctx context.Context, params *ListSlideParams, reqEditors ...RequestEditorFn) (*ListSlideResponse, error)

	// CreateSlide request with any body
	CreateSlideWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSlideResponse, error)

	CreateSlideWithResponse(ctx context.Context, body CreateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSlideResponse, error)

	// DeleteSlide request
	DeleteSlideWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSlideResponse, error)

	// ReadSlide request
	ReadSlideWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSlideResponse, error)

	// UpdateSlide request with any body
	UpdateSlideWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSlideResponse, error)

	UpdateSlideWithResponse(ctx context.Context, id string, body UpdateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSlideResponse, error)

	// ListUser request
	ListUserWithResponse(ctx context.Context, params *ListUserParams, reqEditors ...RequestEditorFn) (*ListUserResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// ReadUser request
	ReadUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ReadUserResponse, error)

	// UpdateUser request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, id int32, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)
}

type ListSlideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Slide3844259445View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSlideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSlideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSlideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Slide3844259445View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSlideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSlideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSlideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteSlideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSlideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSlideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Slide3844259445View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReadSlideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSlideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSlideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Slide3844259445View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateSlideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSlideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User843294600View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User843294600View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User843294600View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReadUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User843294600View
	JSON400      *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
	JSON500 *struct {
		Code   *int32                  `json:"code,omitempty"`
		Errors *map[string]interface{} `json:"errors,omitempty"`
		Status *string                 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListSlideWithResponse request returning *ListSlideResponse
func (c *ClientWithResponses) ListSlideWithResponse(ctx context.Context, params *ListSlideParams, reqEditors ...RequestEditorFn) (*ListSlideResponse, error) {
	rsp, err := c.ListSlide(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSlideResponse(rsp)
}

// CreateSlideWithBodyWithResponse request with arbitrary body returning *CreateSlideResponse
func (c *ClientWithResponses) CreateSlideWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSlideResponse, error) {
	rsp, err := c.CreateSlideWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSlideResponse(rsp)
}

func (c *ClientWithResponses) CreateSlideWithResponse(ctx context.Context, body CreateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSlideResponse, error) {
	rsp, err := c.CreateSlide(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSlideResponse(rsp)
}

// DeleteSlideWithResponse request returning *DeleteSlideResponse
func (c *ClientWithResponses) DeleteSlideWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteSlideResponse, error) {
	rsp, err := c.DeleteSlide(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSlideResponse(rsp)
}

// ReadSlideWithResponse request returning *ReadSlideResponse
func (c *ClientWithResponses) ReadSlideWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSlideResponse, error) {
	rsp, err := c.ReadSlide(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSlideResponse(rsp)
}

// UpdateSlideWithBodyWithResponse request with arbitrary body returning *UpdateSlideResponse
func (c *ClientWithResponses) UpdateSlideWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSlideResponse, error) {
	rsp, err := c.UpdateSlideWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSlideResponse(rsp)
}

func (c *ClientWithResponses) UpdateSlideWithResponse(ctx context.Context, id string, body UpdateSlideJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSlideResponse, error) {
	rsp, err := c.UpdateSlide(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSlideResponse(rsp)
}

// ListUserWithResponse request returning *ListUserResponse
func (c *ClientWithResponses) ListUserWithResponse(ctx context.Context, params *ListUserParams, reqEditors ...RequestEditorFn) (*ListUserResponse, error) {
	rsp, err := c.ListUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// ReadUserWithResponse request returning *ReadUserResponse
func (c *ClientWithResponses) ReadUserWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*ReadUserResponse, error) {
	rsp, err := c.ReadUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, id int32, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ParseListSlideResponse parses an HTTP response from a ListSlideWithResponse call
func ParseListSlideResponse(rsp *http.Response) (*ListSlideResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSlideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Slide3844259445View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSlideResponse parses an HTTP response from a CreateSlideWithResponse call
func ParseCreateSlideResponse(rsp *http.Response) (*CreateSlideResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSlideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Slide3844259445View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSlideResponse parses an HTTP response from a DeleteSlideWithResponse call
func ParseDeleteSlideResponse(rsp *http.Response) (*DeleteSlideResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSlideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadSlideResponse parses an HTTP response from a ReadSlideWithResponse call
func ParseReadSlideResponse(rsp *http.Response) (*ReadSlideResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReadSlideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Slide3844259445View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSlideResponse parses an HTTP response from a UpdateSlideWithResponse call
func ParseUpdateSlideResponse(rsp *http.Response) (*UpdateSlideResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateSlideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Slide3844259445View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListUserResponse parses an HTTP response from a ListUserWithResponse call
func ParseListUserResponse(rsp *http.Response) (*ListUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User843294600View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User843294600View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadUserResponse parses an HTTP response from a ReadUserWithResponse call
func ParseReadUserResponse(rsp *http.Response) (*ReadUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReadUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User843294600View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User843294600View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Code   *int32                  `json:"code,omitempty"`
			Errors *map[string]interface{} `json:"errors,omitempty"`
			Status *string                 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
