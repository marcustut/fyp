// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marcustut/fyp/backend/ent/instance"
	"github.com/marcustut/fyp/backend/ent/schema/ulid"
	"github.com/marcustut/fyp/backend/ent/slide"
	"github.com/marcustut/fyp/backend/ent/user"
)

// SlideCreate is the builder for creating a Slide entity.
type SlideCreate struct {
	config
	mutation *SlideMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SlideCreate) SetName(s string) *SlideCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetPathToken sets the "path_token" field.
func (sc *SlideCreate) SetPathToken(s []string) *SlideCreate {
	sc.mutation.SetPathToken(s)
	return sc
}

// SetSize sets the "size" field.
func (sc *SlideCreate) SetSize(i int64) *SlideCreate {
	sc.mutation.SetSize(i)
	return sc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (sc *SlideCreate) SetNillableSize(i *int64) *SlideCreate {
	if i != nil {
		sc.SetSize(*i)
	}
	return sc
}

// SetAccessLevel sets the "access_level" field.
func (sc *SlideCreate) SetAccessLevel(sl slide.AccessLevel) *SlideCreate {
	sc.mutation.SetAccessLevel(sl)
	return sc
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (sc *SlideCreate) SetNillableAccessLevel(sl *slide.AccessLevel) *SlideCreate {
	if sl != nil {
		sc.SetAccessLevel(*sl)
	}
	return sc
}

// SetSharedWith sets the "shared_with" field.
func (sc *SlideCreate) SetSharedWith(s []string) *SlideCreate {
	sc.mutation.SetSharedWith(s)
	return sc
}

// SetDeleted sets the "deleted" field.
func (sc *SlideCreate) SetDeleted(b bool) *SlideCreate {
	sc.mutation.SetDeleted(b)
	return sc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (sc *SlideCreate) SetNillableDeleted(b *bool) *SlideCreate {
	if b != nil {
		sc.SetDeleted(*b)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SlideCreate) SetCreatedAt(t time.Time) *SlideCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SlideCreate) SetNillableCreatedAt(t *time.Time) *SlideCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SlideCreate) SetUpdatedAt(t time.Time) *SlideCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SlideCreate) SetNillableUpdatedAt(t *time.Time) *SlideCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SlideCreate) SetID(u ulid.ID) *SlideCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SlideCreate) SetNillableID(u *ulid.ID) *SlideCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetInstanceID sets the "instance" edge to the Instance entity by ID.
func (sc *SlideCreate) SetInstanceID(id ulid.ID) *SlideCreate {
	sc.mutation.SetInstanceID(id)
	return sc
}

// SetNillableInstanceID sets the "instance" edge to the Instance entity by ID if the given value is not nil.
func (sc *SlideCreate) SetNillableInstanceID(id *ulid.ID) *SlideCreate {
	if id != nil {
		sc = sc.SetInstanceID(*id)
	}
	return sc
}

// SetInstance sets the "instance" edge to the Instance entity.
func (sc *SlideCreate) SetInstance(i *Instance) *SlideCreate {
	return sc.SetInstanceID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *SlideCreate) SetUserID(id ulid.ID) *SlideCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SlideCreate) SetUser(u *User) *SlideCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the SlideMutation object of the builder.
func (sc *SlideCreate) Mutation() *SlideMutation {
	return sc.mutation
}

// Save creates the Slide in the database.
func (sc *SlideCreate) Save(ctx context.Context) (*Slide, error) {
	var (
		err  error
		node *Slide
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SlideMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SlideCreate) SaveX(ctx context.Context) *Slide {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SlideCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SlideCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SlideCreate) defaults() {
	if _, ok := sc.mutation.AccessLevel(); !ok {
		v := slide.DefaultAccessLevel
		sc.mutation.SetAccessLevel(v)
	}
	if _, ok := sc.mutation.Deleted(); !ok {
		v := slide.DefaultDeleted
		sc.mutation.SetDeleted(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := slide.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := slide.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := slide.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SlideCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := sc.mutation.AccessLevel(); !ok {
		return &ValidationError{Name: "access_level", err: errors.New(`ent: missing required field "access_level"`)}
	}
	if v, ok := sc.mutation.AccessLevel(); ok {
		if err := slide.AccessLevelValidator(v); err != nil {
			return &ValidationError{Name: "access_level", err: fmt.Errorf(`ent: validator failed for field "access_level": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SharedWith(); !ok {
		return &ValidationError{Name: "shared_with", err: errors.New(`ent: missing required field "shared_with"`)}
	}
	if _, ok := sc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "deleted"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (sc *SlideCreate) sqlSave(ctx context.Context) (*Slide, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (sc *SlideCreate) createSpec() (*Slide, *sqlgraph.CreateSpec) {
	var (
		_node = &Slide{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: slide.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: slide.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: slide.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.PathToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: slide.FieldPathToken,
		})
		_node.PathToken = value
	}
	if value, ok := sc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: slide.FieldSize,
		})
		_node.Size = &value
	}
	if value, ok := sc.mutation.AccessLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: slide.FieldAccessLevel,
		})
		_node.AccessLevel = value
	}
	if value, ok := sc.mutation.SharedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: slide.FieldSharedWith,
		})
		_node.SharedWith = value
	}
	if value, ok := sc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: slide.FieldDeleted,
		})
		_node.Deleted = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: slide.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: slide.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   slide.InstanceTable,
			Columns: []string{slide.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slide.UserTable,
			Columns: []string{slide.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_slides = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SlideCreateBulk is the builder for creating many Slide entities in bulk.
type SlideCreateBulk struct {
	config
	builders []*SlideCreate
}

// Save creates the Slide entities in the database.
func (scb *SlideCreateBulk) Save(ctx context.Context) ([]*Slide, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Slide, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SlideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SlideCreateBulk) SaveX(ctx context.Context) []*Slide {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SlideCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SlideCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
