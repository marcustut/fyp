// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/marcustut/fyp/backend/ent/instance"
	"github.com/marcustut/fyp/backend/ent/predicate"
	"github.com/marcustut/fyp/backend/ent/schema/ulid"
	"github.com/marcustut/fyp/backend/ent/slide"
	"github.com/marcustut/fyp/backend/ent/user"
)

// InstanceUpdate is the builder for updating Instance entities.
type InstanceUpdate struct {
	config
	hooks    []Hook
	mutation *InstanceMutation
}

// Where appends a list predicates to the InstanceUpdate builder.
func (iu *InstanceUpdate) Where(ps ...predicate.Instance) *InstanceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetInstanceType sets the "instance_type" field.
func (iu *InstanceUpdate) SetInstanceType(s string) *InstanceUpdate {
	iu.mutation.SetInstanceType(s)
	return iu
}

// SetPrivateDNSName sets the "private_dns_name" field.
func (iu *InstanceUpdate) SetPrivateDNSName(s string) *InstanceUpdate {
	iu.mutation.SetPrivateDNSName(s)
	return iu
}

// SetPrivateIPAddress sets the "private_ip_address" field.
func (iu *InstanceUpdate) SetPrivateIPAddress(s string) *InstanceUpdate {
	iu.mutation.SetPrivateIPAddress(s)
	return iu
}

// SetPublicDNSName sets the "public_dns_name" field.
func (iu *InstanceUpdate) SetPublicDNSName(s string) *InstanceUpdate {
	iu.mutation.SetPublicDNSName(s)
	return iu
}

// SetPublicIPAddress sets the "public_ip_address" field.
func (iu *InstanceUpdate) SetPublicIPAddress(s string) *InstanceUpdate {
	iu.mutation.SetPublicIPAddress(s)
	return iu
}

// SetImageID sets the "image_id" field.
func (iu *InstanceUpdate) SetImageID(s string) *InstanceUpdate {
	iu.mutation.SetImageID(s)
	return iu
}

// SetArchitecture sets the "architecture" field.
func (iu *InstanceUpdate) SetArchitecture(s string) *InstanceUpdate {
	iu.mutation.SetArchitecture(s)
	return iu
}

// SetAvailabilityZone sets the "availability_zone" field.
func (iu *InstanceUpdate) SetAvailabilityZone(s string) *InstanceUpdate {
	iu.mutation.SetAvailabilityZone(s)
	return iu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *InstanceUpdate) SetUserID(id ulid.ID) *InstanceUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *InstanceUpdate) SetUser(u *User) *InstanceUpdate {
	return iu.SetUserID(u.ID)
}

// SetSlideID sets the "slide" edge to the Slide entity by ID.
func (iu *InstanceUpdate) SetSlideID(id ulid.ID) *InstanceUpdate {
	iu.mutation.SetSlideID(id)
	return iu
}

// SetSlide sets the "slide" edge to the Slide entity.
func (iu *InstanceUpdate) SetSlide(s *Slide) *InstanceUpdate {
	return iu.SetSlideID(s.ID)
}

// Mutation returns the InstanceMutation object of the builder.
func (iu *InstanceUpdate) Mutation() *InstanceMutation {
	return iu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iu *InstanceUpdate) ClearUser() *InstanceUpdate {
	iu.mutation.ClearUser()
	return iu
}

// ClearSlide clears the "slide" edge to the Slide entity.
func (iu *InstanceUpdate) ClearSlide() *InstanceUpdate {
	iu.mutation.ClearSlide()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstanceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstanceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InstanceUpdate) check() error {
	if v, ok := iu.mutation.Architecture(); ok {
		if err := instance.ArchitectureValidator(v); err != nil {
			return &ValidationError{Name: "architecture", err: fmt.Errorf("ent: validator failed for field \"architecture\": %w", err)}
		}
	}
	if v, ok := iu.mutation.AvailabilityZone(); ok {
		if err := instance.AvailabilityZoneValidator(v); err != nil {
			return &ValidationError{Name: "availability_zone", err: fmt.Errorf("ent: validator failed for field \"availability_zone\": %w", err)}
		}
	}
	if _, ok := iu.mutation.UserID(); iu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := iu.mutation.SlideID(); iu.mutation.SlideCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"slide\"")
	}
	return nil
}

func (iu *InstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instance.Table,
			Columns: instance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: instance.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.InstanceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldInstanceType,
		})
	}
	if value, ok := iu.mutation.PrivateDNSName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPrivateDNSName,
		})
	}
	if value, ok := iu.mutation.PrivateIPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPrivateIPAddress,
		})
	}
	if value, ok := iu.mutation.PublicDNSName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPublicDNSName,
		})
	}
	if value, ok := iu.mutation.PublicIPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPublicIPAddress,
		})
	}
	if value, ok := iu.mutation.ImageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldImageID,
		})
	}
	if value, ok := iu.mutation.Architecture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldArchitecture,
		})
	}
	if value, ok := iu.mutation.AvailabilityZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldAvailabilityZone,
		})
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instance.UserTable,
			Columns: []string{instance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instance.UserTable,
			Columns: []string{instance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.SlideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   instance.SlideTable,
			Columns: []string{instance.SlideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: slide.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.SlideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   instance.SlideTable,
			Columns: []string{instance.SlideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: slide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InstanceUpdateOne is the builder for updating a single Instance entity.
type InstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstanceMutation
}

// SetInstanceType sets the "instance_type" field.
func (iuo *InstanceUpdateOne) SetInstanceType(s string) *InstanceUpdateOne {
	iuo.mutation.SetInstanceType(s)
	return iuo
}

// SetPrivateDNSName sets the "private_dns_name" field.
func (iuo *InstanceUpdateOne) SetPrivateDNSName(s string) *InstanceUpdateOne {
	iuo.mutation.SetPrivateDNSName(s)
	return iuo
}

// SetPrivateIPAddress sets the "private_ip_address" field.
func (iuo *InstanceUpdateOne) SetPrivateIPAddress(s string) *InstanceUpdateOne {
	iuo.mutation.SetPrivateIPAddress(s)
	return iuo
}

// SetPublicDNSName sets the "public_dns_name" field.
func (iuo *InstanceUpdateOne) SetPublicDNSName(s string) *InstanceUpdateOne {
	iuo.mutation.SetPublicDNSName(s)
	return iuo
}

// SetPublicIPAddress sets the "public_ip_address" field.
func (iuo *InstanceUpdateOne) SetPublicIPAddress(s string) *InstanceUpdateOne {
	iuo.mutation.SetPublicIPAddress(s)
	return iuo
}

// SetImageID sets the "image_id" field.
func (iuo *InstanceUpdateOne) SetImageID(s string) *InstanceUpdateOne {
	iuo.mutation.SetImageID(s)
	return iuo
}

// SetArchitecture sets the "architecture" field.
func (iuo *InstanceUpdateOne) SetArchitecture(s string) *InstanceUpdateOne {
	iuo.mutation.SetArchitecture(s)
	return iuo
}

// SetAvailabilityZone sets the "availability_zone" field.
func (iuo *InstanceUpdateOne) SetAvailabilityZone(s string) *InstanceUpdateOne {
	iuo.mutation.SetAvailabilityZone(s)
	return iuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *InstanceUpdateOne) SetUserID(id ulid.ID) *InstanceUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *InstanceUpdateOne) SetUser(u *User) *InstanceUpdateOne {
	return iuo.SetUserID(u.ID)
}

// SetSlideID sets the "slide" edge to the Slide entity by ID.
func (iuo *InstanceUpdateOne) SetSlideID(id ulid.ID) *InstanceUpdateOne {
	iuo.mutation.SetSlideID(id)
	return iuo
}

// SetSlide sets the "slide" edge to the Slide entity.
func (iuo *InstanceUpdateOne) SetSlide(s *Slide) *InstanceUpdateOne {
	return iuo.SetSlideID(s.ID)
}

// Mutation returns the InstanceMutation object of the builder.
func (iuo *InstanceUpdateOne) Mutation() *InstanceMutation {
	return iuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *InstanceUpdateOne) ClearUser() *InstanceUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// ClearSlide clears the "slide" edge to the Slide entity.
func (iuo *InstanceUpdateOne) ClearSlide() *InstanceUpdateOne {
	iuo.mutation.ClearSlide()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstanceUpdateOne) Select(field string, fields ...string) *InstanceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Instance entity.
func (iuo *InstanceUpdateOne) Save(ctx context.Context) (*Instance, error) {
	var (
		err  error
		node *Instance
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstanceUpdateOne) SaveX(ctx context.Context) *Instance {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstanceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InstanceUpdateOne) check() error {
	if v, ok := iuo.mutation.Architecture(); ok {
		if err := instance.ArchitectureValidator(v); err != nil {
			return &ValidationError{Name: "architecture", err: fmt.Errorf("ent: validator failed for field \"architecture\": %w", err)}
		}
	}
	if v, ok := iuo.mutation.AvailabilityZone(); ok {
		if err := instance.AvailabilityZoneValidator(v); err != nil {
			return &ValidationError{Name: "availability_zone", err: fmt.Errorf("ent: validator failed for field \"availability_zone\": %w", err)}
		}
	}
	if _, ok := iuo.mutation.UserID(); iuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := iuo.mutation.SlideID(); iuo.mutation.SlideCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"slide\"")
	}
	return nil
}

func (iuo *InstanceUpdateOne) sqlSave(ctx context.Context) (_node *Instance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instance.Table,
			Columns: instance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: instance.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Instance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instance.FieldID)
		for _, f := range fields {
			if !instance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.InstanceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldInstanceType,
		})
	}
	if value, ok := iuo.mutation.PrivateDNSName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPrivateDNSName,
		})
	}
	if value, ok := iuo.mutation.PrivateIPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPrivateIPAddress,
		})
	}
	if value, ok := iuo.mutation.PublicDNSName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPublicDNSName,
		})
	}
	if value, ok := iuo.mutation.PublicIPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldPublicIPAddress,
		})
	}
	if value, ok := iuo.mutation.ImageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldImageID,
		})
	}
	if value, ok := iuo.mutation.Architecture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldArchitecture,
		})
	}
	if value, ok := iuo.mutation.AvailabilityZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldAvailabilityZone,
		})
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instance.UserTable,
			Columns: []string{instance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instance.UserTable,
			Columns: []string{instance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.SlideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   instance.SlideTable,
			Columns: []string{instance.SlideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: slide.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.SlideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   instance.SlideTable,
			Columns: []string{instance.SlideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: slide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Instance{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
