enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}

type User {
  id: ID!
  username: String!
  email: String!
  full_name: String
  avatar_url: String
  bio: String
  created_at: Time!
  updated_at: Time!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String! @goField(name: "PasswordHash")
  full_name: String
  avatar_url: String
  bio: String
}
input UpdateUserInput {
  id: ID!
  username: String
  full_name: String
  avatar_url: String
  clear_avatar_url: Boolean
  bio: String
  clear_bio: Boolean
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}
type UserEdge {
  node: User
  cursor: Cursor!
}
input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

extend type Query {
  User(id: ID!): User
  UserByUsername(username: String!): User
  UserByEmail(email: String!): User
  Users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    where: UserWhereInput
    orderBy: UserOrder
  ): UserConnection
}

extend type Mutation {
  CreateUser(input: CreateUserInput!): User
  UpdateUser(input: UpdateUserInput!): User
  DeleteUser(id: ID!): User
  DeleteUserByUsername(username: String!): User
  DeleteUserByEmail(email: String!): User
}
